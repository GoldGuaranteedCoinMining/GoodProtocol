import { default as hre, ethers, upgrades } from "hardhat";
import { BigNumber, Contract, Signer } from "ethers";
import { deployMockContract, MockContract } from "ethereum-waffle";
import { expect } from "chai";
import {
  GoodMarketMaker,
  CERC20,
  GoodReserveCDai,
  UniswapFactory,
} from "../../types";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/dist/src/signer-with-address";
import { deployOldDao, deployDAOWithoutSettings } from "../helpers";

const BN = ethers.BigNumber;
export const NULL_ADDRESS = ethers.constants.AddressZero;
export const BLOCK_INTERVAL = 1;

describe("ProtocolUpgrade - Upgrade old protocol contracts to new ones", () => {
  let nameService,
    dai,
    cDAI,
    avatar,
    identity,
    controller,
    contribution,
    schemeMock,
    oldSetScheme,
    goodDollar,
    signers,
    protocolUpgrade,
    oldReserve,
    oldMarketMaker,
    marketMaker,
    comp,
    founder,
    bancorFormula,
    goodReserve;

  before(async () => {
    [founder, ...signers] = await ethers.getSigners();
    schemeMock = signers.pop();

    let {
      controller: ctrl,
      avatar: av,
      gd,
      identity: id,
      daoCreator,
      nameService: ns,
      cdaiAddress,
      daiAddress,
      COMP: cmp,
      contribution: cnb,
      BancorFormula: bf,
    } = await deployDAOWithoutSettings();
    let {
      goodReserve: oldRes,
      goodMarketMaker: oldMM,
      setSchemes: oldSetSch,
    } = await deployOldDao();
    dai = await ethers.getContractAt("DAIMock", daiAddress);
    cDAI = await ethers.getContractAt("cDAIMock", cdaiAddress);
    controller = ctrl;
    avatar = av;
    nameService = ns;
    oldReserve = oldRes;
    oldMarketMaker = oldMM;
    contribution = cnb;
    oldSetScheme = oldSetSch;
    identity = id;
    bancorFormula = bf;
    goodDollar = await ethers.getContractAt("IGoodDollar", gd);
    comp = cmp;
    console.log("deployed dao", {
      gd,
      identity,
      controller,
      avatar,
    });

    protocolUpgrade = await (
      await ethers.getContractFactory("ProtocolUpgrade")
    ).deploy(controller);
  });
  it("it should update nameservice addresses ", async () => {
    await protocolUpgrade.upgradeBasic(
      nameService.address,
      [
        "CONTROLLER",
        "AVATAR",
        "IDENTITY",
        "GOODDOLLAR",
        "CONTRIBUTION_CALCULATION",
        "BANCOR_FORMULA",
        "DAI",
        "CDAI",
        "COMP",
        "UBISCHEME",
        "BRIDGE_CONTRACT",
        "UBI_RECIPIENT",
      ].map((_) => ethers.utils.keccak256(ethers.utils.toUtf8Bytes(_))),
      [
        controller,
        avatar,
        identity,
        goodDollar.address,
        contribution.address,
        bancorFormula.address,
        dai.address,
        cDAI.address,
        comp.address,
        founder.address,
        founder.address,
        founder.address,
      ],
      [],
      []
    );
    console.log("deploying reserve...");
    goodReserve = await upgrades.deployProxy(
      await ethers.getContractFactory("GoodReserveCDai"),

      [
        nameService.address,
        //check sample merkle tree generated by gdxAirdropCalculation.ts script
        "0x26ef809f3f845395c0bc66ce1eea85146516cb99afd030e2085b13e79514e94c",
      ],
      {
        initializer: "initialize(address, bytes32)",
        kind: "uups",
      }
    );
    console.log("deploying marketMaker...");

    const MM = await ethers.getContractFactory("GoodMarketMaker");

    marketMaker = (await upgrades.deployProxy(
      MM,
      [nameService.address, 999388834642296, 1e15],
      { kind: "uups" }
    )) as GoodMarketMaker;
  });
});
